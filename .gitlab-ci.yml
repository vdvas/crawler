stages:
 - build
 - test
 - deploy
test_container_crawler:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk update && apk upgrade
    - apk add --no-cache py-pip python 
    - apk add libffi-dev openssl-dev libgcc python-dev build-base
    - pip install --no-cache-dir docker-compose
  script:
    - docker-compose up -d
    - docker-compose ps 
    - docker exec crawler_crawler_1 /bin/bash -c "python3 -m unittest discover -s tests/ && coverage run -m unittest discover -s tests/ && coverage report --include crawler/crawler.py"

test_container_ui:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk update && apk upgrade
    - apk add --no-cache py-pip python
    - apk add libffi-dev openssl-dev libgcc python-dev build-base
    - pip install --no-cache-dir docker-compose
  script:
    - docker-compose up -d
    - docker-compose ps
    - docker exec crawler_ui_1 /bin/bash -c "cd /ui && python -m unittest discover -s tests/ && coverage run -m unittest discover -s tests/ && coverage report --include ui/ui.py"


deploy_dev:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk update && apk upgrade
    - apk add --no-cache py-pip python
    - apk add libffi-dev openssl-dev libgcc python-dev build-base
    - pip install --no-cache-dir docker-compose
  script:
    - docker-compose up -d

deploy_prod:
  stage: deploy
  before_script:
  script:
    - echo "deploy" 
    - apk add ca-certificates
    - pwd
    - ls -la 
    - ls -la /
    - mkdir /terraform
    - cp -R terraform /terraform
    - cd /terraform/terraform
    - ls -la
    - ./terraform init
    - ./terraform destroy -auto-approve
    - ./terraform plan
    - ./terraform apply -auto-approve
  environment:
    name: production
#  when: manual
  only:
  - master
